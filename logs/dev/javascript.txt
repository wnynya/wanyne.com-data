[아이디]
nodejs-wol 
[제목]
Node.js 와 Wake On LAN 으로 컴퓨터 원격 부팅하기
[날짜]
2022-10-30 19:01:00

[태그]
개발

[내용]
Node.js에서 WOL 프로토콜을 사용해 컴퓨터를 원격 부팅하는 방법이다.
WOL은 Wake On LAN의 약자로, 랜선이 연결된 랜 카드를 통해 컴퓨터를 켜는 방식이다.
컴퓨터에 WOL이 활성화되어 있어야 하며(경우에 따라 마더보드 설정을 변경해야 할 수도 있다), 
MAC 주소를 알고 있다면 매직 패킷을 전송해 컴퓨터를 원격으로 켤 수 있다.
(연결된 네트워크가 공유기 환경이라면 같은 공유기에 연결된 기기에서 매직 패킷을 보내야 한다.)



1. 간단한 방법

Pingus 모듈 설치
```
npm i pingus
```

다음의 자바스크립트 코드를 실행하면 00-00-00-00-00-00 MAC 주소의 컴퓨터로 매직 패킷이 전송됩니다.
```js
import pingus from 'pingus';

pingus
  .wol('00-00-00-00-00-00')
  .then((result) => {
    console.log(result);
  })
  .catch((error) => {
    throw error;
  });
```



2. 조금 복잡한 방법

WOL 을 사용하려면 매직 패킷을 보내야 합니다. 매직 패킷은 처음 6번의 0xff 와 16번 반복되는 대상 컴퓨터의 MAC 주소로 구성되어 있습니다. 매직 패킷을 UDP 9번 (혹은 7번) 포트로 브로드캐스트하면 라우터 내의 모든 컴퓨터로 패킷이 전송됩니다. 자신의 MAC 주소가 포함된 매직 패킷을 수신받은 랜 카드는 이를 인식하고 대상 컴퓨터를 켭니다.

먼저 매직 패킷 버퍼를 만듭니다.
```js
const header = Buffer.from([0xff, 0xff, 0xff, 0xff, 0xff, 0xff]); // 처음의 0xff 6개

let address = '00-00-00-00-00-00';
address = address.replace(/[^a-f0-9]/g, ''); // MAC 주소 이외의 요소 제거

let mac = Buffer.alloc(6);
for (let i = 0; i < 6; i++) {
  mac[i] = parseInt(address.substring(i * 2, i * 2 + 2), 16); // MAC 주소를 2자씩 끊어서 6 바이트에 할당
}

let magic = header; // 먼저 0xff 6개로 시작
for (let i = 0; i < 16; i++) {
  magic = Buffer.concat([magic, mac]); // 이후 MAC 주소 16회 반복
}
```

만들어진 매직 패킷을 UDP 소켓 (Node.js dgram 사용)으로 브로드캐스트합니다.
```js
import dgram from 'dgram'; // Node.js UDP 소켓

const socket = new dgram.createSocket('udp4');

socket.on('listening', () => {
  socket.setBroadcast(true);
});

// 9번 포트, 브로드캐스트 IP 사용
socket.send(magic, 0, magic.length, 9, '255.255.255.255', (err, bytes) => {
  if (err) {
    throw err;
  }

  console.log('매직 패킷 전송됨', bytes + 'bytes');
});
```

매직 패킷을 보낼 때 대상 컴퓨터는 꺼진 상태이므로 대상의 IP 가 존재하지 않습니다. 
그러므로 대상 컴퓨터 고유의 MAC 주소를 담은 매직 패킷을 라우터 내 모든 기기에 브로드캐스트해 랜 카드가 이를 인식하고 컴퓨터를 킬 수 있도록 합니다.





--------




[아이디]
nodejs-send-tcp-udp-icmp-ping
[제목]
Node.js TCP/UDP/ICMP 핑 보내기 (Pingus 모듈 사용)
[날짜]
2022-10-28 23:41:14

[태그]
개발

[내용]
Node.js 에서 Pingus 모듈을 사용해 각종 프로토콜 (TCP / UDP / ICMP) 로 핑을 보내는 방법입니다.

다른 방법은 아래의 글을 참조하세요.<br />
<a>Node.js 에서 TCP 핑 보내기 (기본 모듈 사용)</a>



먼저 Pingus 모듈을 설치합니다.

```
npm i pingus
```

설치 중 오류가 발생하면 다음의 커멘드로 필요 패키지를 설치해줍니다.<br>
데비안, 우분투의 경우:
```
sudo apt-get install -y build-essential
```

보통의 콘솔 창에서 ping <호스트> 로 사용할 수 있는 ICMP ECHO 핑을 보내봅니다.

예제 파일을 만들고 아래의 코드를 적어넣습니다.
```js
import pingus from 'pingus';

pingus.icmp({ host: 'example.com' }).then((result) => {
  console.log(result); //결과 출력
}).catch((err) => {
  console.warn(err);
});
```

파일을 실행하면 다음과 같은 결과가 출력됩니다.
```js
//콘솔 출력 결과
{
  error: undefined,
  type: 'ping/icmp',
  status: 'reply',
  host: 'example.com',
  ip: '93.184.216.34',
  ips: [ '93.184.216.34', '2606:2800:220:1:248:1893:25c8:1946' ],
  time: 122,
  ttl: 128,
  bytes: 8,
  reply: {
    source: '93.184.216.34',
    type: 0,
    code: 0,
    typestr: 'ECHO_REPLY',
    codestr: 'NO_CODE'
  }
}
```
93.184.216.34 에서 122 밀리초로 응답이 잘 온 것을 확인할 수 있습니다.

TCP 핑도 보내봅니다. 방금 전과 같은 코드에서 프로토콜만 바꿔주면 됩니다.
```js
import pingus from 'pingus';

pingus.tcp({ host: 'localhost', port: 80 }).then((result) => {
  console.log(result); //결과 출력
}).catch((err) => {
  console.warn(err);
});
```

파일을 실행하면 다음과 같은 결과가 출력됩니다.
```js
//콘솔 결과 출력
{
  error: undefined,
  type: 'ping/tcp',
  status: 'open',
  host: 'example.com',
  ip: '93.184.216.34',
  ips: [ '93.184.216.34', '2606:2800:220:1:248:1893:25c8:1946' ],
  time: 125,
  port: 80,
  name: 'http',
  banner: ''
}
```
방금과 같은 아이피에서 80번 포트 응답이 온 걸 확인할 수 있습니다. 브라우저를 켜서 http://example.com 을 접속 해 보면 웹사이트가 동작 중인 걸 확인할 수 있습니다.

localhost 에 22번 포트로 TCP 핑을 보내봅니다.
```js
//콘솔 결과 출력
{
  error: undefined,
  type: 'ping/tcp',
  status: 'open',
  host: 'localhost',
  ip: '127.0.0.1',
  ips: [ '127.0.0.1' ],
  time: 2,
  port: 22,
  name: 'ssh',
  banner: 'SSH-2.0-OpenSSH_8.9p1 Ubuntu-3'
}
```
로컬 22번 포트에서 SSH 서버가 확인됩니다.

똑같은 방법으로 UDP 포트 핑도 보낼 수 있습니다.



참조한 글<br />
<a href="https://github.com/wnynya/Pingus">Github - wnynya/Pingus↗</a>